// Name: Annika Zamora
// Student ID: 21075753

// README
/*
CS105 Final Assignment
Annika Zamora 

INSTRUCTIONS
Ice cream game 

Goal: complete as many orders as possible within 60 sec. The customer requests a specific order which
varies in number of scoops, flavours, and toppings. If player gets the order right they earn money, if 
wrong, they lose a life. Player gets 3 lives. 

Controls: - 'm' for menu at anytime
					- mouse is used for everything else
(cones can only be grabbed with hands, ice cream can only be scooped with the scooper, 
everything else (buttons, toppings) can be clicked with either hands or scooper)
					
VIDEO
https://youtu.be/zGMjK9lz5rE

RELEASE
I Annika Zamora grant permission to CS105 course staff to use
my Final Project program and video for the purpose of promoting CS105.

BASIC CONCEPTS
Drawing shapes: 
ice cream cones, scoops, buttons were all made by drawing shapes. stroke/fill were used a lot 
as well. 

Conditionals: 
conePlaced boolean to make sure ice cream could not be scooped without a cone placed first. Also
used conditionals to alter the mouseIsPressed to act more as mouseClicked by setting mouseIsPressed
to false afterwards (since there is no mouseIsClicked). 

User defined functions:
majority of the code is inside various functions. The draw function only calls functions (minus a conditional
to return to menu at any point). The 'biggest' use of functions were the different screen modes (menu/instruction/
playing/lose screen). 18 user-defined functions in total.

menuScreen: draws all visuals, text/shapes, buttons for title screen.
playingScreen: calls all functions required when game is played. Draws visuals such as tile background, counter, displays text for money. 
instructionScreen: displays text for instructions player can choose to read before playing.
gameOverScreen: displays text for player that game is done, displays highscore.
drawHand: makes cursor into a hand.
drawScooper: makes cursor into a scooper.
button: allows for multiple buttons to be made without having to recode the mouse hits every new button.
iceCreamTub: draws tubs of ice cream, checks if user clicks on any, appends scoops to array.
toppingTub: draws tubs of toppings, checks if user clicks on any, appends toppings to array.
drawScoops: goes through array of scoops player clicked on, draws them.
drawToppings: goes through array of toppings player clicked on, draws them.
createOrder: generates random customer order.
sell: checks if player made correct order, either adds money or takes a life away.
customer: image of customer, draws the order of customer.
reset: resets all values back to original (used when player returns to menu).
garbage: if user messes up, they can use garbage. Resets cone, ice cream, toppings that player clicked on but subtracts money.
hearts: draws images of hearts which represent number of lives user has left.
timer: draws and counts down from 60, timer.

Loops: 
used for tite background when playing. for loops used throughout to iterate through arrays.

Arrays:
used for ice cream scooped by player (fill colour) + scoops customer requested. toppings clicked on by player (fill colour) + toppings
chosen by customer. 

Mouse interaction: 
when hovering over ice cream/topping tubs, cones, buttons: object is shaded in by a slightly a darker colour. mouse clicks used
to switch between hands and scooper, interact with buttons, and to scoop ice cream/toppings.

EXTENDED CONCEPTS
Sound: sound effects used when ice cream is scooped, when order is wrong, when order is correct.
Loading and displaying images: used for customer, hearts, toppings, hands/scooper as the cursor.
Objects: used for toppings when assigning a fill colour to each of the topping types. Accessing the objects later when filling (fill())
each of the toppings.

CODING QUALITY AND VISUAL DESIGN
- else if/else statements used as much as possible to help with efficiency of code
- coding style is consistent and neat (appropriate spacing, variable/function names, code is easy to read)
- visually appealing game. Not ugly, colours are nice together. 
- comments throughout code. 
*/
let imgHand, imgScooper, imgCustomer, imgSpeechBubble, imgHeart, imgCherry, imgSprinkles, imgChocolateSauce, imgWhippedCream, imgCaramelSauce, scoopSound, saleSound, wrongSound;

//options: menu, playing, instructions, gameOver
let gameState = "menu";
let counterMode = "iceCreamBar";

let flavours = ['#fcbbdb', '#8a97cf', '#fcef88', '#61441d', '#fffee6', '#f5c167', '#92d1a0', '#bea1c9', '#added7', '#ebb5e7']; //ice cream flavours

//////////objects//////////
let cherry = {fillCol: "#a10214"};
let sprinkles = {fillCol: "#d941ba"};
let chocolateSauce = {fillCol: "#6e490e"};
let whippedCream = {fillCol: "#f5f0e9"}
let caramelSauce = {fillCol: "#b06f13"}
let toppingType = [cherry, sprinkles, chocolateSauce, whippedCream, caramelSauce];

//options: hand, scoop
let cursor = "hand";

let conePlaced = false;
let scoops = []; // ice cream scoops scooped by player
let toppingsPlaced = []; //toppings placed by player 

let money = 0;
let lives = 3;
let highscore = 0;
let countdown = 60;

//customer order
let order = [];
let orderToppings = [];
let numOfScoops; //number of scoops
let toppingChoice; //toppings/ no toppings
let flavourChoice; //flavours chosen

function preload() {
	imgHand = loadImage("hand.png");
	imgScooper = loadImage("scoop.png");
	imgCustomer = loadImage("customer.png");
	imgSpeechBubble = loadImage("speechBubble.png");
	imgHeart = loadImage("heart.png");
	imgCherry = loadImage("cherry.png");
	imgSprinkles = loadImage("sprinkles.jpg");
	imgChocolateSauce = loadImage("chocolate.png");
	imgWhippedCream = loadImage("whippedCream.png");
	imgCaramelSauce = loadImage("caramel.png");
	scoopSound = loadSound("scoopSound.mov");
	saleSound = loadSound("saleSound.mp3");
	wrongSound = loadSound("wrong.mp3");
}

function setup() {
	createCanvas(800, 500);
	createOrder();
}

function draw() {
	background(220);
	
	if (gameState === "menu") {
		menuScreen();
	}
	
	else if (gameState === "playing") {
		playingScreen();
	}
	
	else if (gameState === "instructions") {
		instructionScreen();
	}
	
	else if (gameState === "gameOver") {
		gameOverScreen();
	}

	if (cursor === "hand") {
		drawHand();
	}
	
	else if (cursor === "scooper") {
		drawScooper();
	}
	
	if (keyIsPressed) {
		if (key === 'm' || key === 'M') {
			gameState = "menu"; 
			reset();
		}
	}
}

function menuScreen(){
	background(179, 195, 242);
	
	textAlign(CENTER);
	textSize(40);
	fill("black");
	
	text("Annika's Ice Cream Parlour", width / 2, 70);
	
	button(width / 2, height / 2, 200, 80, "play", "Play", 45);
	button(width / 2, height / 2 + 100, 200, 80, "instructions", "How To Play", 30);
	
	//ice cream 
	strokeWeight(2);
	fill("#fcbbdb");
	circle(660, 270, 80);
	fill(153, 123, 90);
	triangle(700, 280, 660, 400, 620, 280);	
	
	fill("#fffee6");
	circle(140, 270, 80);
	fill(153, 123, 90);
	triangle(100, 280, 140, 400, 180, 280);	
}

function playingScreen() {
	if (lives > 0) {
		rectMode(CORNER);
	
		//checkerboard background
		let rows = 25;
		let columns = 40;
		let size = 20;
		fill(255, 252, 255);
		stroke(227, 220, 227);
		strokeWeight(2);

		for (let i = 0; i < columns; i++) {
			for (let j = 0; j < rows; j++) {
				square(i * size, j * size, size);
			}
		}

		//display case
		noStroke();
		fill(217);
		rect(0, height - 280, width, 280);
		fill(230);
		rect(0, height - 100, width, 100);
		fill(180);
		rect(0, height - 300, width, 20);

		//(x, y, buttonWidth, buttonHeight, purpose, textInput, fontSize)
		button(100, 450, 100, 50, "iceCream", "Ice Cream", 20);
		button(250, 450, 100, 50, "toppings", "Toppings", 20);
		button(650, 450, 100, 50, "sell", "Sell", 20);
		button(400, 450, 100, 50, "garbage", "Garbage", 20);

		if (counterMode === "iceCreamBar") {
			let iceCreamIndex = 0;
			for (let i = 0; i < 5; i++) {
				for (let j = 0; j < 2; j++) {
					iceCreamTub(100 + (i * 150), 270 + (j * 80), flavours[iceCreamIndex]);
					iceCreamIndex += 1;
				}
			}
		}

		else if (counterMode === "toppingBar") {
			for (let i = 0; i < 5; i++) {
				toppingTub(100 + (i * 150), 310, toppingType[i]);
			
			}
		}
			
		customer();

		//cone stack
		fill(153, 123, 90);
		stroke(92, 72, 39);
		strokeWeight(2);
		triangle(50, 130, 75, 200, 100, 130);
		triangle(50, 140, 75, 210, 100, 140);
		triangle(50, 150, 75, 220, 100, 150);

		if (cursor === "hand") {
			//ice cream scooper in bottom right corner
			let ar = imgScooper.width / imgScooper.height
			image(imgScooper, width - 100, height - 100, 100, 100 / ar);
		}

		else if (cursor === "scooper") {
			//hand in bottom right corner
			let ar = imgHand.width / imgHand.height 
			image(imgHand, width - 85, height - 100, 60, 60 / ar);
		}

		if (mouseX >= width - 65 && mouseX <= width - 35 && mouseY >= height - 95 && mouseY <= height - 5) {
			if (mouseIsPressed) {
				if (cursor === "hand") {
					cursor = "scooper";
				}

				else if (cursor === "scooper") {
					cursor = "hand";
				}
				mouseIsPressed = false;
			}
		}

		if (mouseX >= 50 && mouseX <= 100 &&
			 mouseY >= 130 && mouseY <= 220) {
				noStroke();
				fill(0, 0, 0, 40);
				triangle(50, 130, 75, 200, 100, 130);
				triangle(50, 140, 75, 210, 100, 140);
				triangle(50, 150, 75, 220, 100, 150);

				if (mouseIsPressed) {
					if (cursor === "hand") {
						conePlaced = true;
					}
				}
			}

		if (conePlaced === true) {
			drawScoops();
			drawToppings();
			fill(153, 123, 90);
			stroke(92, 72, 39);
			strokeWeight(2);
			triangle(width / 2 - 30, height / 2 - 140, width / 2, height / 2 - 40, width / 2 + 30, height / 2 - 140);
		}
		
		//display text for amt of money
		fill(0);
		noStroke();
		textSize(20);
		textAlign(LEFT);
		text("Money: $", 85, 20);
		text(money, 168, 20);

		//display hearts for lives
		hearts();
		
		//timer countdown
		timer();
	}
	
	else {
		gameOverScreen();
	}
} 

function instructionScreen() {
	background(81, 106, 181);
	noStroke();
	fill(0);
	textSize(30);
	textAlign(CENTER);
	text("How To Play:", width / 2, 30);
	
	textSize(18);
	textAlign(LEFT);
	text("- Make as many correct ice cream orders as you can in 60 seconds.", 30, 100);
	text("- Each correct order will earn money depending on how complex the order is.", 30, 130);
	text("- You get 3 lives. If you get the order wrong you lose a life.", 30, 160);
	text("- After 3 lives the game is over.", 30, 190);
	
	text("- You can only grab a cone with your hands, and scoop ice cream with the scooper.", 30, 250);
	text("- Use the garbage if you make a mistake. However, wasting food costs money.", 30, 280);
	
	text("- Click 'm' to return to menu any time", 30, 340);
	text("(returning to menu restarts the game.)", 30, 370);
	
	textAlign(RIGHT);
	text("('m' to Return to Menu)", width - 10, height - 20);
}

function gameOverScreen() {
	if (money > highscore) {
		highscore = money;
	}

	background(227, 236, 255);
	fill(0);
	noStroke();
	textAlign(CENTER);
	textSize(40);
	text("Game Over", width / 2, 100);
	textSize(20);
	text("Highscore:", width / 2 - 20, 150);
	textAlign(LEFT);
	text(highscore, width / 2 + 40, 150);
	text("'m' to Return to Main Menu.", 10, height - 10);
	
	strokeWeight(2);
	stroke(92, 72, 39);
	fill("#fffee6");
	circle(width / 2 - 60, height / 2, 100);
	fill("#bea1c9");
	circle(width / 2 + 20, height / 2 + 70, 100);
	fill(153, 123, 90);
	triangle(width / 2 - 120, height / 2 - 30, width / 2 - 90, height / 2 + 55, width / 2 - 230, height / 2 + 55);
	fill("#61441d");
	ellipse(width / 2 + 80, height / 2 + 175, 150, 40);
	ellipse(width / 2 + 120, height / 2 + 190, 130, 40);
	ellipse(width / 2 + 40, height / 2 + 190, 130, 40);
	ellipse(width / 2 + 80, height / 2 + 150, 95, 80);
}

function drawHand() {
	noCursor();
	image(imgHand, mouseX - (imgHand.width / 2), mouseY - 100);
}

function drawScooper() {
	//ice cream scooper
	let ar = imgScooper.width / imgScooper.height
	image(imgScooper, mouseX - 100, mouseY - 40, 200, 200 / ar);
}

//'purpose' indicates what the buttons function is. (options: play, instructions, iceCream, toppings, sell, garbage)
//'text' is what is written on the button
function button(x, y, buttonWidth, buttonHeight, purpose, textInput, fontSize) {
	rectMode(CENTER);
	strokeWeight(3);

	if (mouseX >= x - (buttonWidth / 2) && mouseX <= x + (buttonWidth/ 2) && 
			mouseY >= y - (buttonHeight / 2) && mouseY <= y + (buttonHeight / 2)) {
		
		fill(81, 106, 181);
		if (mouseIsPressed) {
			
			if (purpose === "play") {
				gameState = "playing";
			}
			
			else if (purpose === "instructions") {
				gameState = "instructions";
			}
			
			else if (purpose === "iceCream") {
				counterMode = "iceCreamBar";
			}
			
			else if (purpose === "toppings") {
				counterMode = "toppingBar";
			}
			
			else if (purpose === "sell") {
				sell();
			}
			
			else if (purpose === "garbage") {
				garbage();
			}
			
			mouseIsPressed = false;
		}
	}
	
	else {
		fill(101, 130, 219);
	}
	
	stroke(0);
	strokeWeight(1);
	rect(x, y, buttonWidth, buttonHeight);
	fill("black");
	strokeWeight(0);
	textAlign(CENTER, CENTER);
	textSize(fontSize);
	text(textInput, x, y);
}

//10 ice cream tubs displayed on counter
function iceCreamTub (x, y, flavour) {
	let w = 100;
	let h = 50;
	
	stroke(255);
	strokeWeight(3);
	
	fill(flavour);
	ellipse(x, y, w, h);
	
	if (mouseX >= x - (w / 2) && mouseX <= x + (w / 2) &&
		 mouseY >= y - (h / 2) && mouseY <= y + (h / 2)) {
		fill(0, 0, 0, 40);
		ellipse(x, y, w, h);
		
		if (conePlaced === true) {
			if (mouseIsPressed) {
				if (scoops.length < 2) {
					if (cursor === "scooper") {
						//////////sound//////////
						scoopSound.play();
						append(scoops, flavour);
						mouseIsPressed = false;
					}

					else {
						
					}

					mouseIsPressed = false;
				}
			}
		}
	}
}

//10 topping bins displayed on counter
function toppingTub(x, y, type) {
	let w = 80;
	let h = 130;
	
	stroke(255);
	strokeWeight(3);
	fill(220);
	rectMode(CENTER);
	rect(x, y, w, h);
	
	if (type === cherry) {
		image(imgCherry, x - 50, y - 60, 100, 100 / (imgCherry.width / imgCherry.height));
	}
	
	else if (type === sprinkles) {
		image(imgSprinkles, x - 38, y - 64, 76, 128);
	}
	
	else if (type === chocolateSauce) {
		image(imgChocolateSauce, x - 25, y - 50, 100 / (imgChocolateSauce.height / imgChocolateSauce.width), 100);
	}
	
	else if (type === whippedCream) {
		image(imgWhippedCream, x - 50, y - 50, 100, 100);
	}
	
	else if (type === caramelSauce) {
		image(imgCaramelSauce, x - 25, y - 50, 100 / (imgCaramelSauce.height / imgCaramelSauce.width), 100);
	}
	
	//when mouse hovers over tub
	if (mouseX >= x - (w / 2) && mouseX <= x + (w / 2) &&
		 mouseY >= y - (h / 2) && mouseY <= y + (h / 2)) {
		fill(0, 0, 0, 40);
		rect(x, y, w, h);
		
		//appends scoops to array if cone is placed
		if (scoops.length > 0) {
			if (mouseIsPressed) {
				if (toppingsPlaced.length === 0) {
					append(toppingsPlaced, type);
					mouseIsPressed = false;
				}
			}
		}
	}
}

//draws scoops player scooped
function drawScoops() {
		for (let i = 0; i < scoops.length; i++) {
			stroke(92, 72, 39);
			fill(scoops[i]);
			circle(width / 2, 100 - (i * 60), 60);
		}
}

function drawToppings() {
	for (let i = 0; i < toppingsPlaced.length; i++) {
		fill(toppingsPlaced[i].fillCol);
		
		if (toppingsPlaced[i] === cherry) {
			circle(width / 2 + 15, 72 - ((scoops.length - 1) * 60), 20);
		}
		
		else if (toppingsPlaced[i] === sprinkles) {
			noStroke();
			circle(width / 2 - 3, 75 - (scoops.length - 1) * 60, 4);
			circle(width / 2 - 7, 100 - (scoops.length - 1) * 60, 4);
			circle(width / 2 + 18, 90 - (scoops.length - 1) * 60, 4);
			circle(width / 2 + 5, 90 - (scoops.length - 1) * 60, 4);
			circle(width / 2 - 15, 80 - (scoops.length - 1) * 60, 4);
			circle(width / 2 - 15, 90 - (scoops.length - 1) * 60, 4);
			circle(width / 2 - 3, 85 - (scoops.length - 1) * 60, 4);
			circle(width / 2 + 15, 80 - (scoops.length - 1) * 60, 4);
		}
		
		else if (toppingsPlaced[i] === chocolateSauce || toppingsPlaced[i] === whippedCream || toppingsPlaced[i] === caramelSauce) {
			circle(width / 2, 100 - ((scoops.length - 1) * 60), 60);
			fill(scoops[scoops.length - 1]);
			ellipse(width / 2, 107 - ((scoops.length - 1) * 60), 58, 46);
		}
	}
}

//generates random order
function createOrder() {
	numOfScoops = round(random(1, 2));
	
	for (let i = 0; i < numOfScoops; i++) {
		flavourChoice = random(flavours);
		append(order, flavourChoice);
	}
	
	toppingChoice = round(random(0, 1));
	
	if (toppingChoice === 1) {
		append(orderToppings, random(toppingType));
	}
}

//checks if player matched customers order
function sell() {
	let correct = false;
	
	if (scoops.length === order.length) {
		for (let i = 0; i < scoops.length; i++) {
			if (scoops[i] === order[i]) {
				if (toppingsPlaced.length === orderToppings) {
					for (let i = 0; i < toppingsPlaced.length; i++) {
						if (toppingsPlaced[i] === orderToppings[i]) {
							correct = true;
						}
					}
				}
				
				correct = true;
			}
			
			else {
				correct = false;
			}
		}
	}
	
	if (correct) {
		money += scoops.length * 4;
		saleSound.play();
	}
	
	else {
		wrongSound.play();
		lives -= 1;
	}
	
	//resets + creates new order 
	scoops = [];
	toppingsPlaced = [];
	order = [];
	orderToppings = [];
	conePlaced = false;
	createOrder();
}

function customer() {
	//////////loading/displaying image//////////
	//image of customer
	let ar = imgCustomer.width / imgCustomer.height	
	image(imgCustomer, width - 210, 7, 230, 230 / ar);
	
	//speech bubble
	image(imgSpeechBubble, width - 325, -18, 130, 240);
	
	//draws ice cream order
	for (let i = 0; i < order.length; i++) {
		fill(order[i]);
		stroke(92, 72, 39);
		strokeWeight(2);
		circle(width / 2 + 140, 80 - (i * 35), 35);
	}
	
	for (let i = 0; i < orderToppings.length; i++) {
		fill(orderToppings[i].fillCol);
		
		if (orderToppings[i] === cherry) {
			circle(width / 2 + 147, 59 - ((order.length - 1) * 35), 10);
		}
		
		else if (orderToppings[i] === sprinkles) {
			noStroke();
			circle(width / 2 + 140 - 3, 70 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 - 7, 90 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 + 13, 85 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 + 5, 85 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 - 15, 75 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 - 15, 85 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 - 3, 80 - (order.length - 1) * 35, 3);
			circle(width / 2 + 140 + 15, 75 - (order.length - 1) * 35, 3);
		}
		
		else if (orderToppings[i] === chocolateSauce || orderToppings[i] === whippedCream || orderToppings[i] === caramelSauce) {
			circle(width / 2 + 140, 80 - ((order.length - 1) * 35), 35);
			fill(order[order.length - 1]);
			ellipse(width / 2 + 140, 85 - ((order.length - 1) * 35), 32, 27);
		}
	}
	
	//cone
	stroke(92, 72, 39);
	strokeWeight(2);
	fill(153, 123, 90);
	triangle(525, 90, 540, 140, 555, 90);
}

//resets game; resets all values to original
function reset() {
	scoops = [];
	toppingsPlaced = [];
	order = [];
	orderToppings = [];
	conePlaced = false;
	createOrder();
	money = 0;
	lives = 3;
	countdown = 60;
	counterMode = "iceCreamBar";
	cursor = "hand";
}

//resets ice cream if scooped wrong 
function garbage() {
	cost = 0; //amt subtracted when ice cream thrown out
	
	if (conePlaced) {
		cost += 2;
	}
	
	cost += scoops.length * 4;
	money -= cost;
	scoops = [];
	toppingsPlaced = [];
	orderToppings = [];
	conePlaced = false;
}

function hearts() {
	ar = imgHeart.width / imgHeart.height
	text("Lives:", 205, 20); 
	
	for (let i = 0; i < lives; i++) {
		image(imgHeart, 260 + (30 * i), 4, 30, 30 / ar);
	}
}

function timer() {
	fill(255);
	strokeWeight(2);
	stroke(0);
	circle(35, 35, 50);
	fill(0);
	noStroke();
	textAlign(CENTER);
	text(countdown, 35, 35);
	if (frameCount % 20 === 0 && countdown >= 0) {
		countdown -= 1;
	}
	
	if (countdown <= 0) {
		gameOverScreen();
	}
}
